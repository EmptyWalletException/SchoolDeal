<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd

     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">


    <!-- spring 的配置文件,主要配置和业务逻辑有关的配置 ,例如数据源,事务控制,连接池 -->

    <!--spring-dao部分开始-->
    <!-- 开启扫描包,与springMVC互补,springMVC只扫描controller,而spring除了controller其它的都扫描 -->
    <context:component-scan base-package="com.kingguanzhang">
        <!-- 排除掉controller ,所以配置一个exclude exprission里配置一个controller注解的真实名字-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!-- 配置 jdbc 配置文件路径 -->
    <!--<context:property-placeholder location="classpath:dbconfig.properties"/>
-->
    <!--将上面的jdbc配置db文件的字段更改成加密字段-->
    <bean class="com.kingguanzhang.util.EncryptPropertyPlaceholderConfigurer">
        <property name="locations"><!--locations是固定用法,表示下面将引入文件位置信息-->
            <list>
                <value>classpath:dbconfig.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="UTF-8"></property>
    </bean>

    <!-- 配置数据源连接池 -->
    <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>

    <!--导入spring-security配置文件,这里废弃掉,采用了别的导入方式
    <import resource="classpath:spring-security.xml"/>-->


    <!-- spring 与 mybatis 的整合=============开始 -->
    <!--配置SqlSessionFactoryBean-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定 mybatis 全局配置文件的位置 -->
        <property name="configLocation" value="classpath:mybatis.xml" />
        <!-- 引入  dataSource连接池 的位置 -->
        <property name="dataSource" ref="pooledDataSource"/>
        <!-- 指定 Mapper 文件的位置 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!-- 配置一个可以用于批量操作数据库的sqlSession -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSession"></constructor-arg>
        <!--这里发现一个问题,执行器如果设置成batch(批量的意思),虽然能提高缓存性能但是就不会返回受影响的行数了.
            当这个值为BATCH时， mapper方法返回结果就只有-2147482646 这一个值。defaultExecutorType一共有三个值：BATCH, REUSE, SIMPLE。这三个值分别的特点如下：
名称         描述
SIMPLE     执行器执行其它语句，默认值。
REUSE     可能重复使用prepared statements 语句
BATCH     可以重复执行语句和批量更新
        -->
        <constructor-arg name="executorType" value="SIMPLE"></constructor-arg>
    </bean>

    <!-- 配置扫描器,将mybatis接口的实现加入到ioc容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 配置Dao接口 所在的包-->
        <property name="basePackage" value="com.kingguanzhang.dao"/>
    </bean>
    <!-- spring 与 mybatis 的整合=============结束 -->
    <!--spring-dao部分结束-->


    <!--spring-service部分开始-->
    <!-- 开启事务的控制==============开始 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 需要告诉事务管理器数据源的引用位置 -->
        <property name="dataSource" ref="pooledDataSource"/>
    </bean>
    <!-- 开启基于注解的事务,一般用于不重要的事务 -->
    <!-- 配置事务的通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- 配置事务的AOP -->
    <aop:config>
        <aop:pointcut expression="execution(* com.kingguanzhang.service..*(..))" id="txPoint"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>
    <!-- 开启事务的控制==============结束 -->
    <!--spring-service部分结束-->


</beans>